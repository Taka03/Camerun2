//*=============================================================================
//EnemyMouse.cpp
//*=============================================================================

//==============================================================================
//include
//==============================================================================
#include "EnemyMouse.h"
#include <vector>
#include <fstream>

//==============================================================================
//enum
//==============================================================================
//マウスアニメーションタイプ
enum eMouseAnimType
{
	ANIM_STAND,
	ANIM_WALK,
	ANIM_STUN,
};

//=============================================================================
//コンストラクタ
//=============================================================================
//[input]
//	pName:データ名
//	vPos:設定する座標
//	pResFile:敵の動きのファイル
//=============================================================================
CEnemyMouse::CEnemyMouse( const char *pName, Math::Vector3D vPos, File::IResourceFile *pResFile ) 
:CEnemy( pName, vPos, pResFile ) 
{
	m_PhotoPoint = 30;
	
	m_TypeName = ",Rn";//ネズミ
	m_StTypeName = "ネズミ";

	
	m_IsVisible = false;
	
	float Scale = 0.5f;
	
	m_vScale.Set( Scale, Scale, Scale );
	
	m_vInitScale = m_vScale;
	
	m_fSpeed = 2.0f;

	
}


//=============================================================================
//初期化
//=============================================================================
void CEnemyMouse::Init()
{
	CEnemy::Init();	
	
	m_AnimID[ANIM_NOW] = ANIM_WALK;
	
	//ルートの移動キーの設定
	SetRootKey();

}

//=============================================================================
//立ち状態の行動パターン
//=============================================================================
void CEnemyMouse::MovePatternStand()
{
	static int count = 0;
	
	count++;	
	
	//if( count > 180 )
	//{
	//	m_IsStopKeyTime = false;
	//	count = 0;
	//	m_AnimID[ANIM_NEXT] = ANIM_WALK;
	//}
	
}


//=============================================================================
//処理
//=============================================================================
void CEnemyMouse::Exec()
{
	m_vCatchPos = m_vPos + Math::Vector3D( 0, 0.5f, 0 ) + m_vFront * 0.5f;
	
	CEnemy::Exec();
	
}

//=============================================================================
//移動処理
//=============================================================================
void CEnemyMouse::MoveExec()
{
	MoveRoot();
}

//=============================================================================
//ねずみの鳴き声の再生
//=============================================================================
//[input]
//	pSound:サウンドデバイス
//	fDistance:距離
//=============================================================================
void CEnemyMouse::PlaySnd( Selene::Sound::ISound *pSound, float fDistance )
{
	static float Pan = -100.0f;
	
	Pan += 1.0f;
	
	if( Pan >= 100 )
	{
		Pan = 100;
	}
	
	pSound->SetVolume( 0, 100 - (fDistance * 0.5f) );
	
	pSound->Play( 0, true );
	
	
}


//=============================================================================
//壁との判定
//=============================================================================
//[input]
//	pField:フィールド
//[return]
//	壁に当たっているかどうか
//=============================================================================
bool CEnemyMouse::HitCheckWall( CField *pField )
{
	m_HitRay.vStart = m_vPos + Math::Vector3D( 0.0f, 3.0f, 0.0f );
	m_HitRay.vEnd = m_HitRay.vStart + m_vFront * 0.2f;
	
	Renderer::SCollisionResultExtend RetEx;
	
	Bool HitCheck = MoveCheck( pField );
	
	//通れる箇所の設定
	if( HitCheck == MASK_MOUSE || HitCheck == -1 )
	{
		return false;
	}
	
	return true;
	
}









